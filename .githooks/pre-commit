#!/bin/bash

# Pre-commit hook to prevent API key leaks
# This script checks for common API key patterns in staged files

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get all staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)

# Flag to track if we found any secrets
FOUND_SECRETS=0

# Patterns to check for (common API key formats)
declare -a PATTERNS=(
    "sk-[a-zA-Z0-9]{48}"                    # OpenAI API key
    "sk-or-v1-[a-zA-Z0-9]{64,}"            # OpenRouter API key
    "AIza[0-9A-Za-z_-]{35}"                 # Google API key
    "ghp_[a-zA-Z0-9]{36}"                   # GitHub personal access token
    "ghs_[a-zA-Z0-9]{36}"                   # GitHub server token
    "glpat-[a-zA-Z0-9-]{20,}"              # GitLab personal access token
    "AKIA[0-9A-Z]{16}"                      # AWS access key ID
    "[a-zA-Z0-9/+=]{40}"                    # AWS secret (less specific, might have false positives)
    "sq0[a-z]{3}-[0-9A-Za-z-_]{22,43}"     # Square OAuth secret
    "sk_live_[0-9a-zA-Z]{24,}"             # Stripe live key
    "rk_live_[0-9a-zA-Z]{24,}"             # Stripe restricted key
)

# Files to exclude from checking
declare -a EXCLUDED_FILES=(
    ".env.example"
    "package-lock.json"
    "pnpm-lock.yaml"
    ".githooks/pre-commit"
)

# Function to check if file should be excluded
should_exclude() {
    local file=$1
    for excluded in "${EXCLUDED_FILES[@]}"; do
        if [[ "$file" == "$excluded" ]]; then
            return 0
        fi
    done
    # Also exclude files in certain directories
    if [[ "$file" == .git/* ]] || [[ "$file" == node_modules/* ]] || [[ "$file" == .svelte-kit/* ]]; then
        return 0
    fi
    return 1
}

echo -e "${YELLOW}🔍 Checking for API keys and secrets in staged files...${NC}"

for FILE in $STAGED_FILES; do
    # Skip excluded files
    if should_exclude "$FILE"; then
        continue
    fi
    
    # Only check text files
    if file --mime "$FILE" 2>/dev/null | grep -q "text"; then
        for PATTERN in "${PATTERNS[@]}"; do
            if git diff --cached "$FILE" | grep -E "$PATTERN" > /dev/null 2>&1; then
                echo -e "${RED}❌ Potential API key found in $FILE${NC}"
                echo -e "${RED}   Pattern matched: $PATTERN${NC}"
                FOUND_SECRETS=1
            fi
        done
        
        # Additional checks for common secret variable names
        if git diff --cached "$FILE" | grep -E "(api[_-]?key|api[_-]?secret|access[_-]?token|auth[_-]?token|private[_-]?key|secret[_-]?key).*=.*['\"][^'\"]{20,}['\"]" -i > /dev/null 2>&1; then
            echo -e "${RED}❌ Potential hardcoded secret found in $FILE${NC}"
            FOUND_SECRETS=1
        fi
    fi
done

if [ $FOUND_SECRETS -eq 1 ]; then
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}🚨 COMMIT BLOCKED: Potential API keys or secrets detected!${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${YELLOW}Please review the files above and:${NC}"
    echo -e "  1. Remove any hardcoded API keys or secrets"
    echo -e "  2. Use environment variables instead (.env, .dev.vars)"
    echo -e "  3. Add sensitive files to .gitignore"
    echo ""
    echo -e "${YELLOW}If this is a false positive, you can:${NC}"
    echo -e "  • Use ${GREEN}git commit --no-verify${NC} to skip this check (NOT RECOMMENDED)"
    echo -e "  • Update the patterns in .githooks/pre-commit"
    echo ""
    exit 1
else
    echo -e "${GREEN}✅ No API keys or secrets detected in staged files${NC}"
fi

exit 0